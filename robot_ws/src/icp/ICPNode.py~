#!/usr/bin/env python
PKG = 'ICP'
import roslib; roslib.load_manifest(PKG)
import rospy
import numpy as np
from gulliview_server.msg import Pos
from robotclient.srv import GetCoord
import MeasurementMixer as me
import algorithm
import Distribution
import DataCollect
import matplotlib.pyplot as plt
import Kalman

def callback(pos):

    rospy.init_node('position_sample_node')
    srv1 = 'get_coord0'
    srv2 = 'get_coord1'
    rospy.wait_for_service(srv1)
    try:
        get_coords1 = rospy.ServiceProxy(srv1, GetCoord)
        f = get_coords1(1)
        tmp_pos = f.data.data
        Gps_x1 = tmp_pos[0]
        Gps_y1 = tmp_pos[1]
    except rospy.ServiceException as exc1:
        print("Service1 did not process request: " + str(exc1))

    rospy.wait_for_service(srv2)
    try:
         get_coords2 = rospy.ServiceProxy(srv2, GetCoord)
         f = get_coords1(1)
         tmp_pos = f.data.data
         Gps_x2 = tmp_pos[0]
         Gps_y2 = tmp_pos[1]
    except rospy.ServiceException as exc2:
        print("Service2 did not process request: " + str(exc2))

    mean_f = [np.matrix([[Gps_x1], [Gps_y1]]), np.matrix([[Gps_x2], [Gps_y2]])]
    mean_v = [np.matrix([[pos.x1], [pos.y1]]), np.matrix([[pos.x2], [pos.y2]])]

    data = DataCollect.DataCollect(2, 1)

    T_s = 0.1
    n_v = 2
    p1 = np.matrix('1.01; 0.1')
    p2 = np.matrix('2.9; 1.9')
    cov1 = np.matrix('0.5 0; 0 0.5')
    cov2 = np.matrix('0.5 0; 0 0.5')
    init_veh_distr = [Distribution.Distribution(p1, cov1), Distribution.Distribution(p2, cov2)]

    p3 = np.matrix('0.5; 0.5')
    cov3 = np.matrix('5 0; 0 5')
    init_feat_distr = [Distribution.Distribution(p3, cov3)]

    data.init(2, 1, init_veh_distr, init_feat_distr)

    var_pos1 = 2
    var_pos2 = 2
    var_init = [[var_pos1, var_pos1], [var_pos2, var_pos2]]

    meas = me.MeasurementMixer(2, 1, mean_v, mean_f)

    v = algorithm.init_veh(2, 1, init_veh_distr, var_init)
    f = algorithm.init_feat(1, 2, init_feat_distr)

    algorithm.main_loop(v, f, meas, 7, 1, data)


def listener():
    rospy.init_node('listener', anonymous=True)
    rospy.Subscriber("position", Pos, callback, queue_size=100)
  # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    listener()
